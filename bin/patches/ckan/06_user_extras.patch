diff --git a/ckan/lib/cli.py b/ckan/lib/cli.py
index 7135a156f..aa0fbf1ab 100644
--- a/ckan/lib/cli.py
+++ b/ckan/lib/cli.py
@@ -354,7 +354,7 @@ class ManageDb(CkanCommand):
     def command(self):
         cmd = self.args[0]
 
-        self._load_config(cmd!='upgrade')
+        self._load_config(cmd not in ('init', 'upgrade'))
         import ckan.model as model
         import ckan.lib.search as search
 
diff --git a/ckan/lib/dictization/model_dictize.py b/ckan/lib/dictization/model_dictize.py
index 33948ae51..fb341a4c9 100644
--- a/ckan/lib/dictization/model_dictize.py
+++ b/ckan/lib/dictization/model_dictize.py
@@ -546,7 +546,9 @@ def user_list_dictize(obj_list, context,
 def member_dictize(member, context):
     return d.table_dictize(member, context)
 
-def user_dictize(user, context, include_password_hash=False):
+def user_dictize(
+        user, context, include_password_hash=False,
+        include_plugin_extras=False):
 
     if context.get('with_capacity'):
         user, capacity = user
@@ -569,6 +571,7 @@ def user_dictize(user, context, include_password_hash=False):
     reset_key = result_dict.pop('reset_key', None)
     apikey = result_dict.pop('apikey', None)
     email = result_dict.pop('email', None)
+    plugin_extras = result_dict.pop('plugin_extras', None)
 
     if context.get('keep_email', False):
         result_dict['email'] = email
@@ -587,6 +590,10 @@ def user_dictize(user, context, include_password_hash=False):
         if include_password_hash:
             result_dict['password_hash'] = password_hash
 
+        if include_plugin_extras:
+            result_dict['plugin_extras'] = plugin_extras
+
+
     model = context['model']
     session = model.Session
 
diff --git a/ckan/logic/action/create.py b/ckan/logic/action/create.py
index af992db35..9194515e7 100644
--- a/ckan/logic/action/create.py
+++ b/ckan/logic/action/create.py
@@ -942,6 +942,25 @@ def user_create(context, data_dict):
     :type fullname: string
     :param about: a description of the new user (optional)
     :type about: string
+    :param plugin_extras: private extra user data belonging to plugins.
+        Only sysadmin users may set this value. It should be a dict that can
+        be dumped into JSON, and plugins should namespace their extras with
+        the plugin name to avoid collisions with other plugins, eg::
+
+            {
+                "name": "test_user",
+                "email": "test@example.com",
+                "plugin_extras": {
+                    "my_plugin": {
+                        "private_extra": 1
+                    },
+                    "another_plugin": {
+                        "another_extra": True
+                    }
+                }
+            }
+    :type plugin_extras: dict
+
 
     :returns: the newly created user
     :rtype: dictionary
@@ -994,7 +1013,14 @@ def user_create(context, data_dict):
     user_dictize_context = context.copy()
     user_dictize_context['keep_apikey'] = True
     user_dictize_context['keep_email'] = True
-    user_dict = model_dictize.user_dictize(user, user_dictize_context)
+
+    include_plugin_extras = False
+    author_obj = model.User.get(context['user'])
+    if author_obj:
+        include_plugin_extras = author_obj.sysadmin and 'plugin_extras' in data
+
+    user_dict = model_dictize.user_dictize(
+        user, user_dictize_context, include_plugin_extras=include_plugin_extras)
 
     context['user_obj'] = user
     context['id'] = user.id
diff --git a/ckan/logic/action/get.py b/ckan/logic/action/get.py
index 824b799e9..58be43de3 100644
--- a/ckan/logic/action/get.py
+++ b/ckan/logic/action/get.py
@@ -1416,6 +1416,10 @@ def user_show(context, data_dict):
     :param include_password_hash: Include the stored password hash
         (sysadmin only, optional, default:``False``)
     :type include_password_hash: bool
+    :param include_plugin_extras: Include the internal plugin extras object
+        (sysadmin only, optional, default:``False``)
+    :type include_plugin_extras: bool
+
 
     :returns: the details of the user. Includes email_hash, number_of_edits and
         number_created_packages (which excludes draft or private datasets
@@ -1457,8 +1461,11 @@ def user_show(context, data_dict):
     include_password_hash = sysadmin and asbool(
         data_dict.get('include_password_hash', False))
 
+    include_plugin_extras = sysadmin and asbool(
+        data_dict.get('include_plugin_extras', False))
+
     user_dict = model_dictize.user_dictize(
-        user_obj, context, include_password_hash)
+        user_obj, context, include_password_hash, include_plugin_extras)
 
     if context.get('return_minimal'):
         log.warning('Use of the "return_minimal" in user_show is '
diff --git a/ckan/logic/action/update.py b/ckan/logic/action/update.py
index 197f7b3f0..ea5e9cfab 100644
--- a/ckan/logic/action/update.py
+++ b/ckan/logic/action/update.py
@@ -691,7 +691,16 @@ def user_update(context, data_dict):
 
     if not context.get('defer_commit'):
         model.repo.commit()
-    return model_dictize.user_dictize(user, context)
+
+    author_obj = model.User.get(context['user'])
+    include_plugin_extras = False
+    if author_obj:
+        include_plugin_extras = author_obj.sysadmin and 'plugin_extras' in data
+
+    user_dict = model_dictize.user_dictize(
+        user, context, include_plugin_extras=include_plugin_extras)
+
+    return user_dict
 
 
 def user_generate_apikey(context, data_dict):
diff --git a/ckan/logic/schema.py b/ckan/logic/schema.py
index d01836131..fb419d690 100644
--- a/ckan/logic/schema.py
+++ b/ckan/logic/schema.py
@@ -394,7 +394,7 @@ def default_user_schema(
         ignore_missing, unicode_safe, name_validator, user_name_validator,
         user_password_validator, user_password_not_empty,
         ignore_not_sysadmin, not_empty, email_validator,
-        user_about_validator, ignore):
+        user_about_validator, ignore, json_object):
     return {
         'id': [ignore_missing, unicode_safe],
         'name': [
@@ -411,6 +411,7 @@ def default_user_schema(
         'reset_key': [ignore],
         'activity_streams_email_notifications': [ignore_missing],
         'state': [ignore_missing],
+        'plugin_extras': [ignore_missing, json_object, ignore_not_sysadmin],
     }
 
 
diff --git a/ckan/migration/versions/087_add_user_plugin_extras_column.py b/ckan/migration/versions/087_add_user_plugin_extras_column.py
new file mode 100644
index 000000000..ca6fc019b
--- /dev/null
+++ b/ckan/migration/versions/087_add_user_plugin_extras_column.py
@@ -0,0 +1,4 @@
+def upgrade(migrate_engine):
+    migrate_engine.execute(
+        'ALTER TABLE "user" ADD plugin_extras JSONB'
+    )
diff --git a/ckan/model/user.py b/ckan/model/user.py
index fb1b36e61..3eec556d6 100644
--- a/ckan/model/user.py
+++ b/ckan/model/user.py
@@ -10,6 +10,8 @@ from passlib.hash import pbkdf2_sha512
 from sqlalchemy.sql.expression import or_
 from sqlalchemy.orm import synonym
 from sqlalchemy import types, Column, Table, func
+from sqlalchemy.dialects.postgresql import JSONB
+from sqlalchemy.ext.mutable import MutableDict
 from six import text_type
 import vdm.sqlalchemy
 
@@ -33,6 +35,7 @@ user_table = Table('user', meta.metadata,
         Column('activity_streams_email_notifications', types.Boolean,
             default=False),
         Column('sysadmin', types.Boolean, default=False),
+        Column('plugin_extras', MutableDict.as_mutable(JSONB))
         )
 
 vdm.sqlalchemy.make_table_stateful(user_table)
