# -*- coding: utf-8 -*-

import logging
from flask import Blueprint
from ckan import model
from ckan.views.dataset import CreateView as DatasetCreateView
from ckan.views.resource import CreateView as ResourceCreateView
import ckan.plugins.toolkit as toolkit
from ckanext.scheming.helpers import scheming_get_dataset_schema
from ckanext.unhcr import mailer
from ckanext.unhcr.activity import log_download_activity
from ckanext.unhcr.utils import resource_is_blocked


log = logging.getLogger(__name__)


unhcr_dataset_blueprint = Blueprint(
    'unhcr_dataset',
    __name__,
    url_prefix=u'/dataset',
    url_defaults={u'package_type': u'dataset'},
)


def publish(package_type, dataset_id):
    if (not hasattr(toolkit.c, "user") or not toolkit.c.user):
        return toolkit.abort(403, "Forbidden")

    context = {'model': model, 'user': toolkit.c.user}
    dataset = toolkit.get_action('package_show')(context.copy(), {'id': dataset_id})
    if len(dataset['resources']) == 0:
        return toolkit.abort(400, 'Dataset must have one or more resources to publish')
    dataset = toolkit.get_action('package_patch')(context.copy(), {'id': dataset_id, 'state': 'active'})
    toolkit.h.flash_success('Dataset "%s" has been published' % dataset['title'])
    return toolkit.redirect_to('dataset_read', id=dataset['name'])


def copy(package_type, dataset_id):
    if (not hasattr(toolkit.c, "user") or not toolkit.c.user):
        return toolkit.abort(403, "Forbidden")

    context = {'model': model, 'user': toolkit.c.user}

    # Get organizations
    orgs = toolkit.get_action('organization_list_for_user')(
        context.copy(),
        {'permission': 'create_dataset'}
    )
    org_ids = [org['id'] for org in orgs]

    # Check access
    if not orgs:
        message = 'Not authorized to copy dataset "%s"'
        return toolkit.abort(403, message % dataset_id)

    # Get dataset
    try:
        dataset = toolkit.get_action('package_show')(
            context.copy(),
            {'id': dataset_id}
        )
    except (toolkit.NotAuthorized, toolkit.ObjectNotFound):
        message = 'Not found py dataset "%s"'
        return toolkit.abort(404, message % dataset_id)

    # Extract data
    data = {}
    schema = scheming_get_dataset_schema('dataset')
    for field in schema['dataset_fields']:
        # We skip name/title
        if field['field_name'] in ['name', 'title']:
            continue
        # We skip autogenerated fields
        if field.get('form_snippet', True) is None:
            continue
        # We skip empty fields
        if field['field_name'] not in dataset:
            continue
        data[field['field_name']] = dataset[field['field_name']]
    data['type'] = 'dataset'
    data['private'] = bool(dataset.get('private'))
    if data.get('owner_org'):
        data['owner_org'] = data['owner_org'] if data['owner_org'] in org_ids else None
    data['original_dataset'] = dataset

    view = DatasetCreateView()
    return view.get(package_type, data=data)


def resource_copy(package_type, dataset_id, resource_id):
    if (not hasattr(toolkit.c, "user") or not toolkit.c.user):
        return toolkit.abort(403, "Forbidden")

    context = {'model': model, 'user': toolkit.c.user}

    # Check access
    try:
        toolkit.check_access('package_update', context, {'id': dataset_id})
    except toolkit.NotAuthorized:
        message = 'Not authorized to copy resource of dataset "%s"'
        return toolkit.abort(403, message % dataset_id)

    # Get resource
    try:
        resource = toolkit.get_action('resource_show')(context, {'id': resource_id})
    except (toolkit.NotAuthorized, toolkit.ObjectNotFound):
        message = 'Not found resource "%s" of dataset "%s"'
        return toolkit.abort(404, message % (resource_id, dataset_id))

    # Extract data
    data = {}
    schema = scheming_get_dataset_schema('dataset')
    for field in schema['resource_fields']:
        # We skip url field (current file)
        if field['field_name'] == 'url':
            continue
        # We skip autogenerated fields
        if field.get('form_snippet', True) is None:
            continue
        if field['field_name'] in resource:
            data[field['field_name']] = resource[field['field_name']]
    data['name'] = '%s (copy)' % resource.get('name')

    view = ResourceCreateView()
    return view.get(package_type, dataset_id, data=data)


def publish_microdata(package_type, dataset_id):
    if (not hasattr(toolkit.c, "user") or not toolkit.c.user):
        return toolkit.abort(403, "Forbidden")

    nation = toolkit.request.form.get('nation')
    repoid = toolkit.request.form.get('repoid')
    context = {'model': model, 'user': toolkit.c.user}

    # Get dataset
    try:
        dataset = toolkit.get_action('package_show')(context.copy(), {'id': dataset_id})
    except (toolkit.ObjectNotFound, toolkit.NotAuthorized):
        message = 'Not authorized to publish of dataset "%s"'
        return toolkit.abort(403, message % dataset_id)

    # Publish to Microdata
    error = None
    try:
        survey = toolkit.get_action('package_publish_microdata')(
            context.copy(), {'id': dataset_id, 'nation': nation, 'repoid': repoid})
    except (toolkit.NotAuthorized, RuntimeError) as exception:
        error = str(exception)

    # Show flash message and redirect
    if not error:
        message = 'Dataset "%s" published to the Microdata library at the following address: "%s"'
        toolkit.h.flash_success(message % (dataset['title'], survey['url']))
    else:
        message = 'Dataset "%s" publishing to the Microdata library is not completed for the following reason: "%s"'
        toolkit.h.flash_error(message % (dataset['title'], error))
    return toolkit.redirect_to('dataset_edit', id=dataset['name'])


def request_access(package_type, dataset_id):
    if (not hasattr(toolkit.c, "user") or not toolkit.c.user):
        return toolkit.abort(403, "Forbidden")

    message = toolkit.request.form.get('message')

    context = {'model': model, 'user': toolkit.c.user}
    try:
        dataset = toolkit.get_action('package_show')(
            context.copy(),
            {'id': dataset_id}
        )
    except toolkit.ObjectNotFound:
        return toolkit.abort(404, 'Dataset not found')
    except toolkit.NotAuthorized:
        return toolkit.abort(403, 'Not Authorized')

    if toolkit.h.can_download(dataset):
        toolkit.h.flash_notice(
            u'You already have access to download resources from {}'.format(
                dataset['title']
            )
        )
        return toolkit.redirect_to('dataset_read', id=dataset['id'])

    try:
        toolkit.get_action('access_request_create')(
            context.copy(), {
                'object_id': dataset['id'],
                'object_type': 'package',
                'message': message,
                'role': 'member',
            }
        )
    except toolkit.ObjectNotFound as e:
        return toolkit.abort(404, str(e))
    except toolkit.NotAuthorized:
        return toolkit.abort(403, 'Not Authorized')
    except toolkit.ValidationError as e:
        if e.error_dict and 'message' in e.error_dict:
            return toolkit.abort(
                400,
                e.error_dict['message'][0].replace('package', 'dataset')
            )
        return toolkit.abort(400, 'Bad Request')

    org_admins = mailer.get_dataset_request_access_email_recipients(dataset)
    for recipient in org_admins:
        subj = mailer.compose_dataset_request_access_email_subj(dataset)
        body = mailer.compose_request_access_email_body(
            'dataset',
            recipient,
            dataset,
            toolkit.c.userobj,
            message,
        )
        toolkit.enqueue_job(mailer.mail_user_by_id, [recipient['name'], subj, body])

    toolkit.h.flash_success(
        u'Requested access to download resources from {}'.format(
            dataset['title']
        )
    )

    return toolkit.redirect_to('dataset_read', id=dataset['id'])


unhcr_dataset_blueprint.add_url_rule(
    rule=u'/publish/<dataset_id>',
    view_func=publish,
)
unhcr_dataset_blueprint.add_url_rule(
    rule=u'/copy/<dataset_id>',
    view_func=copy,
)
unhcr_dataset_blueprint.add_url_rule(
    rule=u'/<dataset_id>/resource_copy/<resource_id>',
    view_func=resource_copy,
)
unhcr_dataset_blueprint.add_url_rule(
    rule=u'/<dataset_id>/publish_microdata',
    view_func=publish_microdata,
    methods=['POST',],
)
unhcr_dataset_blueprint.add_url_rule(
    rule=u'/<dataset_id>/request_access',
    view_func=request_access,
    methods=['POST',],
)
