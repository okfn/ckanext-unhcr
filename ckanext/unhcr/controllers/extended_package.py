import logging
from ckan import model
import ckan.plugins.toolkit as toolkit
from ckan.controllers.package import PackageController
from ckanext.scheming.helpers import scheming_get_dataset_schema
from ckanext.unhcr import mailer
from ckanext.unhcr.activity import log_download_activity
from ckanext.unhcr.utils import resource_is_blocked
log = logging.getLogger(__name__)


class ExtendedPackageController(PackageController):

    # Read

    def read(self, id):
        if not toolkit.c.user:
            return toolkit.abort(403, toolkit.render('page.html'))
        return super(ExtendedPackageController, self).read(id)

    # Publish

    def publish(self, id):
        context = {'model': model, 'user': toolkit.c.user}
        dataset = toolkit.get_action('package_patch')(context, {'id': id, 'state': 'active'})
        toolkit.h.flash_success('Dataset "%s" has been published' % dataset['title'])
        toolkit.redirect_to('dataset_read', id=dataset['name'])

    # Copy

    def copy(self, id):
        context = {'model': model, 'user': toolkit.c.user}

        # Get organizations
        orgs = toolkit.get_action('organization_list_for_user')(
            context, {'permission': 'create_dataset'})
        org_ids = [org['id'] for org in orgs]

        # Check access
        if not orgs:
            message = 'Not authorized to copy dataset "%s"'
            return toolkit.abort(403, message % id)

        # Get dataset
        try:
            dataset = toolkit.get_action('package_show')(context, {'id': id})
        except (toolkit.NotAuthorized, toolkit.ObjectNotFound):
            message = 'Not found py dataset "%s"'
            return toolkit.abort(404, message % id)

        # Extract data
        data = {}
        schema = scheming_get_dataset_schema('dataset')
        for field in schema['dataset_fields']:
            # We skip name/title
            if field['field_name'] in ['name', 'title']:
                continue
            # We skip autogenerated fields
            if field.get('form_snippet', True) is None:
                continue
            # We skip empty fields
            if field['field_name'] not in dataset:
                continue
            data[field['field_name']] = dataset[field['field_name']]
        data['type'] = 'dataset'
        data['private'] = bool(dataset.get('private'))
        if data.get('owner_org'):
            data['owner_org'] = data['owner_org'] if data['owner_org'] in org_ids else None
        data['original_dataset'] = dataset

        return self.new(data=data)

    def resource_copy(self, id, resource_id):
        context = {'model': model, 'user': toolkit.c.user}

        # Check access
        try:
            toolkit.check_access('package_update', context, {'id': id})
        except toolkit.NotAuthorized:
            message = 'Not authorized to copy resource of dataset "%s"'
            return toolkit.abort(403, message % id)

        # Get resource
        try:
            resource = toolkit.get_action('resource_show')(context, {'id': resource_id})
        except (toolkit.NotAuthorized, toolkit.ObjectNotFound):
            message = 'Not found resource "%s" of dataset "%s"'
            return toolkit.abort(404, message % (resource_id, id))

        # Extract data
        data = {}
        schema = scheming_get_dataset_schema('dataset')
        for field in schema['resource_fields']:
            # We skip url field (current file)
            if field['field_name'] == 'url':
                continue
            # We skip autogenerated fields
            if field.get('form_snippet', True) is None:
                continue
            if field['field_name'] in resource:
                data[field['field_name']] = resource[field['field_name']]
        data['name'] = '%s (copy)' % resource.get('name')

        return self.new_resource(id, data=data)

    # Download

    def resource_download(self, id, resource_id, filename=None):
        """
        Wraps default `resource_download` endpoint checking
        the custom `resource_download` auth function
        """
        context = {'model': model, 'session': model.Session,
                   'user': toolkit.c.user, 'auth_user_obj': toolkit.c.userobj}

        # Check resource_download access
        try:
            toolkit.check_access(u'resource_download', context, {u'id': resource_id})
        except toolkit.ObjectNotFound:
            return toolkit.abort(404, toolkit._(u'Resource not found'))
        except toolkit.NotAuthorized:
            return toolkit.abort(403, toolkit._(u'Not Authorized to download the resource'))

        if resource_is_blocked(context, resource_id):
            return toolkit.abort(404, toolkit._(u'Resource not found'))

        resp = super(ExtendedPackageController, self).resource_download(
            id, resource_id, filename=filename
        )
        log_download_activity(context, resource_id)
        return resp

    # Activity

    def activity(self, dataset_id):
        '''Render package's internal activity stream page.'''

        context = {'model': model, 'user': toolkit.c.user}
        data_dict = {'id': dataset_id}
        try:
            # We check for package_show because
            # in some states package_update can be forbidden
            toolkit.check_access('package_show', context, data_dict)
            toolkit.c.pkg_dict = toolkit.get_action('package_show')(context, data_dict)
            toolkit.c.pkg = context['package']
            toolkit.c.package_activity_stream = toolkit.get_action(
                'package_activity_list_html')(
                context, {
                    'id': dataset_id,
                    'get_internal_activities': True
                })
        except toolkit.ObjectNotFound:
            toolkit.abort(404, toolkit._('Dataset not found'))
        except toolkit.NotAuthorized:
            toolkit.abort(403, toolkit._('Unauthorized to read the internal activity for dataset %s') % dataset_id)

        return toolkit.render('package/activity.html', {'dataset_type': 'deposited-dataset'})

    # Publish

    def publish_microdata(self, id):
        context = {'model': model, 'user': toolkit.c.user}
        nation = toolkit.request.params.get('nation')
        repoid = toolkit.request.params.get('repoid')

        # Get dataset
        try:
            dataset = toolkit.get_action('package_show')(context, {'id': id})
        except (toolkit.ObjectNotFound, toolkit.NotAuthorized):
            message = 'Not authorized to publish of dataset "%s"'
            return toolkit.abort(403, message % id)

        # Publish to Microdata
        error = None
        try:
            survey = toolkit.get_action('package_publish_microdata')(
                context, {'id': id, 'nation': nation, 'repoid': repoid})
        except (toolkit.NotAuthorized, RuntimeError) as exception:
            error = str(exception)

        # Show flash message and redirect
        if not error:
            message = 'Dataset "%s" published to the Microdata library at the following address: "%s"'
            toolkit.h.flash_success(message % (dataset['title'], survey['url']))
        else:
            message = 'Dataset "%s" publishing to the Microdata library is not completed for the following reason: "%s"'
            toolkit.h.flash_error(message % (dataset['title'], error))
        toolkit.redirect_to('dataset_edit', id=dataset['name'])

    def request_access(self, id):
        message = toolkit.request.params.get('message')

        action_context = {'model': model, 'user': toolkit.c.user}
        try:
            dataset = toolkit.get_action('package_show')(action_context, {'id': id})
        except toolkit.ObjectNotFound:
            return toolkit.abort(404, 'Dataset not found')
        except toolkit.NotAuthorized:
            return toolkit.abort(403, 'Not Authorized')

        if toolkit.h.can_download(dataset):
            toolkit.h.flash_notice(
                'You already have access to download resources from {}'.format(
                    dataset['title']
                )
            )
            return toolkit.redirect_to('dataset_read', id=dataset['id'])

        try:
            toolkit.get_action('access_request_create')(
                action_context, {
                    'object_id': dataset['id'],
                    'object_type': 'package',
                    'message': message,
                    'role': 'member',
                }
            )
        except toolkit.ObjectNotFound as e:
            return toolkit.abort(404, str(e))
        except toolkit.NotAuthorized:
            return toolkit.abort(403, 'Not Authorized')
        except toolkit.ValidationError as e:
            if e.error_dict and 'message' in e.error_dict:
                return toolkit.abort(
                    400,
                    e.error_dict['message'][0].replace('package', 'dataset')
                )
            return toolkit.abort(400, 'Bad Request')

        org_admins = mailer.get_dataset_request_access_email_recipients(dataset)
        for recipient in org_admins:
            subj = mailer.compose_dataset_request_access_email_subj(dataset)
            body = mailer.compose_request_access_email_body(
                'dataset',
                recipient,
                dataset,
                toolkit.c.userobj,
                message,
            )
            mailer.mail_user_by_id(recipient['name'], subj, body)

        toolkit.h.flash_success(
            'Requested access to download resources from {}'.format(
                dataset['title']
            )
        )

        return toolkit.redirect_to('dataset_read', id=dataset['id'])
